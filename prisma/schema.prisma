generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Expense   Expense[]
  Income    Income[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

enum Frequency {
  ONE_TIME
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY
}

enum ExpenseCategory {
  FOOD // 食物
  TRANSPORTATION // 交通
  SHOPPING // 購物
  ENTERTAINMENT // 娛樂
  BILLS // 帳單
  HEALTH // 健康
  LEARNING // 學習
  INVESTMENT // 投資
  INSURANCE // 保險
  TRAVEL // 旅遊
  OTHER // 其他
}

enum IncomeCategory {
  SALARY // 薪資
  BONUS // 獎金
  DIVIDEND // 股息
  SIDE_JOB // 副業收入
  INVESTMENT // 投資收益
  RENTAL // 租金收入
  ROYALTY // 版稅
  CAPITAL_GAINS // 資本利得
  PENSION // 退休金
  INHERITANCE // 繼承收入
  FREELANCE // 自由職業收入
  LOTTERY // 彩票或賭博收入
  TRUST // 信託收入
  TAX_REFUND // 退稅
  ANNUITY // 年金
  GIFT // 禮物
  OTHER // 其他
}

enum Currency {
  USD
  JPY
  TWD
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Expense {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  category       ExpenseCategory
  currency       Currency
  amount         Float
  frequency      Frequency
  description    String
  startTime      DateTime
  endTime        DateTime?
  includeEndTime Boolean
  userId         String          @db.ObjectId
  user           User            @relation(fields: [userId], references: [id])
  tags           ExpenseTag[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Tag {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String       @unique
  expenses  ExpenseTag[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model ExpenseTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  expenseId String   @db.ObjectId
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  tagId     String   @db.ObjectId
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Income {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  category    IncomeCategory
  currency    Currency
  amount      Float
  frequency   Frequency
  description String
  date        DateTime
  userId      String         @db.ObjectId
  user        User           @relation(fields: [userId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
